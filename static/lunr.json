[{"uri":"/posts/agile-way-to-choerodon","description":"敏捷管理是基于用户需求的演变为中心，通过迭代的方式来进行的软件开发。","date":"2018-03-15","autor":"choerodon","tags":["agile"],"categories":["技术类"],"content":" 敏捷 管理 是 基于 用户 需求 的 演变 为 中心 ， 通过 迭代 的 方式 来 进行 的 软件开发 。 关于 软件开发 ， 我们 现在 可以 找到 很多 前人 的 经验 ， 包括 已经 存在 方法论 和 工具 ， 这 之间 其实 很难说 哪个 方法论 是 正确 的 ， 或是 哪个 工具 是 最好 用 的 ； 其实 开发 是 “ 任性 的 ”， 它 没有 定律 ， 如人饮水 冷暖自知 ， 其 过程 是否 高效 ， 除了 团队 的 实力 这个 决定性 因素 之外 ， 还 取决于 整个 开发 的 流程 是否是 清晰 的 。 高效 总是 伴随 着 清晰 而 来 ， 清晰 的 目标 ， 清晰 的 计划 ， 清晰 的 职责 ……Choerodon 认为 软件 交付 的 过程 本质 是 用户 价值 的 实现 ， 而 用户 价值 的 实现 是 通过 用户 价值 的 流动 来 体现 的 ，Choerodon 提供 了 一套 工具 来 帮助 用户 通过 敏捷 的 方式 来 管理 用户 价值 的 流动 ， 管理 和 规范化 整个 软件开发 流程 。Choerodon 敏捷 管理 的 核心 是 需求 ， 计划 和 执行 。 即 通过 故事 地图 、 用户 故事 来 管理 用户 故事 和 发布 计划 ， 通过 迭代 来 管理 冲刺 ， 最后 通过 看 板 来 可视化 冲刺 的 执行 。 故事 地图 故事 地图 已经 成为 敏捷 管理 在 需求 规划 中 的 一个 重要 的 方法 。Choerodon 的 故事 地图 可以 将 你 的 用户 故事 （user stories） 像 地图 一样 展现 出来 ， 而 不是 传统 的 简单 列表 形式 。 故事 地图 之所以 重要 是因为 ： 让 你 更 容易 看清 整个 项目 的 规划 ， 所有 的 product backlog 为 新 功能 筛选 （grooming） 和 划定 优先级 提供 了 更好 的 工具 ， 帮助 你 做出 决策 便于 使用 头脑 风暴 或 其他 协作 方式 来 产生 用户 故事 帮助 你 更好 的 进行 迭代 开发 ， 同时 确保 早期 的 发布 可以 验证 整体 架构 和 解决方案 对于 传统 的 项目 计划 ， 如 ： 传统 产品 需求 文档 （PRD） 提供 了 一个 更好 的 替代 工具 有助于 激发 讨论 和 管理 项目 范围 允许 你 从 多个 维度 进行 项目 规划 ， 并 确保 不同 的 想法 都 可以 得到 采纳 创建 故事 地图 的 8 个 步骤 ： 在 公司 或 部门 内 找到 最 熟悉 我们 要 开发 的 产品 领域 3-5 人 。 之所以 将 范围 定 在 3-5 之间 。 因为 少于 三 人 很大 程度 上 你 没法 得到 足够 的 建议 ， 而 多于 五 人 则 讨论 和 协调会 浪费 很多 时间 ， 降低 会议 效率 。 使用 头脑 风暴 模式 ， 让 每个 人 在 便签 纸 上 写下 自己 认为 重要 的 “ 所 要 做 的 事情 ” 也 就是 用户 任务 （user task）。 每个 人 都 用 同样 颜色 的 便签 来 书写 自己 的 用户 任务 描述 ， 这个 阶段 不要 互相 讨论 。 一旦 大家 都 基本 完成 了 准备 ， 让 每个 人 轮流 大声 读出 自己 的 内容 ， 并 把 便签 纸 全部 放置 在 桌面上 ， 这时 如果 出现 重复 的 内容 就 可以 省略 掉 ：     根据 你 的 产品 规模 不同 ， 这个 过程 可能 需要 3-10 分钟 的 时间 ， 通过观察 实际 状况 而 定 。     这些 便签 组成 了 一级 用户 故事 ，Jeff Patton 称为 用户 任务 （user tasks）。     我们 可以 提示 参与者 ： 我们 只用 了 很少 的 时间 就 完成 了 需求 的 收集 过程 ， 而且 有些 你 可能 没有 想到 内容 ， 其他人 帮 你 想到 了 。 将 桌面上 所有 的 便签 进行 分组 ， 将 类似 的 任务 分为 一组 。     分组 过程 最好 不要 以 讨论 的 模式 进行 ， 速度 会 更 快 。 如果 发现 重复 的 内容 ， 就 略过 ；     这时 同样 观察 每个 人 的 行为 ， 判断 大家 是否 已经 做 完 ， 基本上 这个 过程 需要 2-5 分钟 选择 另外 一个 颜色 的 便签 ， 对 分 好 每个 组 进行 命名 ， 贴 在 每组 便签 的 上部 对 这些 分 好 组 的 便签 进行 排序 ， 一般 按照 用户 完成 操作 的 顺序 ， 或者 是 其他 的 方式 等 ， 从左到右 摆放      如果 大家 无法 决定 顺序 ， 那么 顺序 可能 没有 那么 重要 （ 明显 ）。     这 一组 便签 ，Jeff Patton 称为   用户 活动  （User Activities）     这时 你 的 地图 应该 类似 于 现在 ， 从 粉色 便签 这 行 开始 讲述 用户 故事 ， 确保 你 没有 遗漏 任何 用户 活动 和 用户 任务 。 这时 一般 由 组织者 来 进行 讲述 ， 其他人 提出 意见 ， 甚至 可以 让 最终用户 来 参与 讨论 。 以上 我们 已经 完成 了 用户 故事 地图 的 基本 框架 ； 可以 在 每个 用户 任务 下面 添加 更加 细节 的 用户 故事 （User Stories） 了 。 我们 仍然 建议 使用 头脑 风暴 的 模式 来 进行 第一轮 用户 故事 的 产生 ， 同时 可以 借助 如 Persona 和 Scenario 等 方式 协助 完成 这个 过程 。 当 我们 完成 了 用户 故事 的 创建 ， 就 可以 开始 划定 发布 计划 （Releases）。     在 第一个 发布 计划 中 只 选择 每个 用户 任务 的 2-3 个 用户 故事 。 这 对于 帮助 大家 排定 优先级 和 范围 将 很 有 帮助 。     通常 情况 我们 不必 使用 用户 故事 的 标准 句法 来 书写 这些 故事 ， 因为 每张 便签 都 处于 我们 的 地图 的 特定 位置 ， 很 容易 识别 其 所 处 的 场景 和 角色 。 最后 ， 针对 第一个 发布 的 所有 用户 故事 进行 分解 ， 确保 我们 的 第一个 发布 越小越 好 ， 基本上 你 需要 保证 在 1-2 个 迭代 后 就 可以 发布 你 产品 的 第一个 版本 。Choerodon 故事 地 图样 例 第二行 所 包含 的 内容 就是 “ 相应 的 角色 对应 的 活动 ”， 包括 类似 ： 用户 角色 管理 ， 服务 管理 等等 。 第一行 说明 有 哪 几类 不同 角色 。 橙色 和 蓝色 标签 包含 了 目前 整个 项目 整体规划 的 所有 用户 故事 ， 但 会 随着 项目 进行 进行 适当 调整 和 完善 。 现在 如果 我们 专注 于 完成 导入 冲刺 的 橙色 便签 ， 我们 就 可以 确保 很快 发布 一款 具有 用户 价值 小 功能 的 产品 。 这样 我们 就 可以 验证 我们 正在 开发 或 修改 的 小 功能 点 （ 如 ： 去掉 发布 管理员 ， 将 服务 发布 权限 更改 等 ） 可行 。 同时 也 可以 帮助 我们 对系统 的 功能 进行 端 到 端的 测试 ， 确保 我们 可以 从 用户 处 获取 到 反馈 ， 知道 我们 是否 解决 了 它们 的 问题 （ 提供 了 商业价值 ）。Choerodon 用户 故事 样 例 点击 “+”， 查看 每个 用户 故事 （user stories） 的 相关 用户 任务 （user tasks） 有 哪些 。 直接 清晰 看到 用户 故事 相应 负责人 用户 故事 （user stories） 可以 根据 优先级 自上而下 排列 ， 大家 可以 根据 优先级 和 状态 进行 评估 ， 对 开发 进程 进行 适当 的 调整 。 迭代 用 迭代 来 管理 冲刺 ， 每 一个 迭代 对应 一次 冲刺 ， 也 可以 简单 理解 为 每 一次 冲刺 就是 一个 迭代 周期 。 在 固定 的 时间 内 ， 要 完成 需求 分析 、 设计 、 实现 、 测试 等 一系列 活动 ， 在 迭代 周期 完成 的 时候 提供 一个 可 工作 的 产品 (Release/Report)。 每 一次 迭代 完成 的 可能 是 一个 或 几个 完整 的 用户 故事 ， 也 可能 是 一个 用户 故事 （user story） 中 的 若干 用户 任务 （user tasks）。 敏捷 方法 很 重视 稳定 的 迭代 节奏 ，Simon Baker 描述 说 ：\" 就 像 心脏 有 规律 地 跳动 来 保持 身体 运行 ， 固定 的 迭代 长度 提供 了 一个 恒量 ， 有助于 建立 开发 和 交付 的 节奏 。 根据 我 的 经验 ， 节奏 是 帮助 取得 不变 的 步幅 的 重要 因素 \"（2004）。 对于 敏捷 开发 的 团队 而言 ， 稳定 的 迭代 节奏 可以 让 产品 保持 更 稳定 的 交付 。 那 我们 要 如何 找到 适合 自身 的 迭代 后期 ， 我们 可以 从 以下 6 各 方面 考虑 ： 整个 项目 周期 长度 （ 完成 计划 的 商业 需求 所 需 时间 ）， 较 短 的 迭代 周期 将 会 有 以下 一些 优点 和 缺点      更 频繁 的 向 客户 展示 / 交付 可用 的 软件 ， 更 频繁 的 取得 反馈 并 改进 ， 一般 大 的 项目 最好 有 3 次 或 以上 获取 反馈 、 修正 的 机会 ， 错误 能 被 尽快 发现 从而 不会 酿成 大 错 ；     迭代 周期 缩短 ， 团队 没有 能力 保证 作出 的 每 一个 决定 都 正确 ， 很多 开销 都 必须 花 在 试错 上 ；Scrum  团队 的 抗 风险 能力 弱 于 瀑布 模型 团队 ， 因为 一个 人 的 离职 或 病假 都 可能 对 单一 功能 的 进度 造成 影响 不确定性 ， 客户 需求 的 不 确定 ， 团队 的 工作效率 ， 或者 技术难度 存在 不确定性 ， 总而言之 ， 不确定性 越 多 ， 迭代 周期 越短 。 获得 反馈 的 难易 程度 迭代 周期 内 优先级 是否 被 改变 ， 也 是 选择 迭代 长度 时 需要 考虑 的 因素 。 迭代 的 系统 开销 ， 每次 迭代 的 成本 （ 时间 ）， 在 测试 过程 中 我们 要花费 的 时间 。 团队 成员 的 压力 ， 选择 一个 合适 的 迭代 周期 长度 ， 让 团队 成员 在 整个 迭代 过程 中 感受 到 的 压力 尽可能 平均 。 根据 每个 团队 的 实际 情况 ， 一般 建议 2~4 周 。 在 我们 的 实践 中 ， 通常 以 1-2 周 一次 迭代 的 频率 ， 保持 相对 稳定 的 开发 和 交付 的 节奏 。Choerodon 冲刺 样 例 清晰 展现 当前 迭代 的 完成度 ， 以及 总 工作量 。 可以 根据 优先级 和 状态 进行 评估 ， 对 当前 迭代 进程 进程 进行 整体 把 控 。 看 板 看 板 方法 是 用于 高效 管理 软件开发 流程 的 新 技术 。 看 板 方法 源自 丰田 的 “ 及时 生产 ”（JIT=just-in-time） 系统 。 尽管 生产 软件 是 一项 创造性 活动 ， 与 批量生产 汽车 有所不同 ， 但是 生产线 管理 背后 所 蕴含 的 原理 仍然 适用 。 一个 软件开发 的 流程 可以 看作 是 一段 自来水管 道 ， 特性 需求 从 一端 进入 ， 经过 改进 的 软件 从 另一端 涌现 出来 。 在 管道 内部 ， 存在 着 各种各样 的 工序 ， 有的是 非正式 的 临时 工序 ， 有的是 非常 正式 的 阶段性 流程 。 在 本文 中 ， 我们 假设 一个 简单 的 阶段性 流程 ：(1) 分析 需求 ，(2) 开发 代码 ，(3) 测试软件 运行 正常 。Choerodon 的 看 板 是 Choerodon 敏捷 管理 中 执行 部分 ， 它 的 核心作用 是 可视化 整个 迭代 的 计划 执行 ， 并且 暴露 开发 执行 过程 中 的 短板 或者 瓶颈 。 我们 都 知道 在 软件开发 过程 中 ， 短板 或者 瓶颈 会 直接 的 影响 整个 开发 进程 。 例如 ， 如果 测试人员 每周 只能 测试 5 个 特性 ， 而 开发人员 和 分析 人员 每周 能够 生产 10 个 特性 ， 整个 管道 的 吞吐量 就 只有 每周 5 个 特性  ， 因为 测试人员 扮演 了 瓶颈 角色 。 如果 分析 人员 和 开发人员 不 知道 测试人员 是 瓶颈 ， 那么 测试人员 的 待办 工作 就 会 越 堆积 越 多 。 影响 就是 前置 时间 增加 。 并且 ， 就 如同 库存 一样 ， 位于 管道 中 的 工作 会 套牢 投入 的 资金 、 产生 与 市场 的 距离 、 以及 随着 时间 逐渐 失去 价值 。 最终 ， 影响 到 质量 。 为了 能够 跟上 进度 ， 测试人员 开始 抄近路 。 最终 bug 被 发布 到 产品 中 ， 导致 给 用户 带来 问题 ， 从而 影响 未来 的 管道 产能 。 另一方面 ， 如果 我们 知道 哪里 有 瓶颈 ， 我们 就 能够 重新部署 资源 来 解除 它 。 例如 ， 分析 人员 可以 帮忙 测试 ， 开发人员 开始 进行 自动化 测试 。 但是 ， 我们 怎样才能 知道 在 已知 流程 中 哪里 是 瓶颈 呢 ？ 而 当 瓶颈 移动 后 会 发生 什么 呢 ？ 看 板 方法 可以 动态显示 瓶颈 看 板 方法 难以想象 的 简单 ， 但 却 难以想象 的 强大 。 最 简单 的 形式 的 看 板系统 包括 了 一个 挂 在 墙上 的 大 白板 ， 上面 有 许多 卡片 或 即时贴 ， 这些 即时贴 按 列 来 放置 ， 每 列 上方 有 一个 数字 。 你 之所以 能 找到 这些 瓶颈 ， 是因为 限制 了 在 制品 （work-in-progress, WIP） 的 数量 会 显示 出 瓶颈 。 卡片 代表 了 工作 项 ， 列 代表 了 开发 工序 ， 卡片 会 从 第一步 工序 流动 到 最后 一步 。 每 一列 顶部 的 数字 用来 限制 每 一列 最 多 允许 放置 卡片 的 数量 。 看 板 白板 的 限制 大相径庭 于 其他 任何 可视化 故事 板 。 在 流程 中 的 每 一步 限制 在 制品 （WIP） 数量 ， 可以 预防 生产过剩 并 动态 显现出 瓶颈 ， 以便 于 你 可以 在 达到 不可收拾 的 程度 之前 找到 它们 。Choerodon 的 看 板 注意 ， 我们 已经 将 一些 列 分割 成 了 两列 ， 这 是 为了 用来 说明 正在 进行 中 的 项 与 哪些 已经 完成 并 准备 好 被 下游 工序 拉走 的 项 。 你 也 可以 用 一些 不同 的 方式 来 布局 白板 。 这里 用 的 是 比较简单 的 方式 。 列 顶部 的 限制 包含 了 “doing”（ 进行 中 ） 和 “done”（ 完成 ） 两列 。 一旦 测试人员 完成 了 一个 特性 的 测试 ， 就 会 将 卡片 移走 ， 并且 在 “ 测试 ” 列 空闲 出 一个 卡片 位置 。 现在 ，“ 测试 ” 列 中空 出来 的 位置 可以 用 开发 “Done” 列 中 的 一个 卡片 补充 进来 。 这时 ，“ 开发 ” 列 就 会 空闲 出 一个 卡片 位置 ， 下 一张 卡片 就 可以 从 “ 分析 ” 列 中 拉进来 ， 其他 列 也 是 这样 。 敏捷 管理 过程 中 ， 看 板 的 使用 和 敏捷 会议 流程 往往 是 相辅相成 的 ， 常见 的 主要 有 以下 四种 会议 计划 会 （ 一 ）： 参与 人员 ：Product Owner、Scrum Master、 团队 成员 ， 也 可以 邀请 业务人员 一起 参加 。 会议 时 长 ：1-4 小时 根据 确定 好 的 故事 地图 和 用户 故事 ， 我们 通过 计划 会议 ， 确定 迭代 的 目标 、 团队 成员 、 形成 本次 迭代 的 Sprint Backlog， 同时 明确 评审会 、 回顾 会 时间 ； 确定 Sprint Backlog 确定 工作量 （ 工作 时间 ）； 计划 会 （ 二 ） 参与 人员 ：Product Owner、Scrum Master、 团队 成员 ， 其他 人员 选择性 参加 会议 时 长 ：1-4 小时    团队 成员 共同 拆解 细化 sprint backlog， 拆解 为 若干 tasks；   共同 进行 工作量 评估 ， 可以 按照 天 或 小时 来 评估 ；   团队 成员 自主 选择 任务 ， 共同 确定 DoD 完成 标准 ， 团队 内部 达成 一致 ； 如果 单个 迭代 内 安排 的 Product Backlog 安排 的 比较 多 的话 ， 一般 迭代 计划 会议 需要 开 一个 整天 ， 虽然 时间 有点 长 ， 但 这个 会议 会 确认 整个 迭代 的 详细 计划 和 安排 ， 使 开发 流程 变 清晰 每日 站 会 团队 每天 进行 沟通 的 内部 短 会 ， 一般 只有 10-15 分钟 ， 团队 成员 通常 会 在 会议 上 讲述 昨天 的 工作 ， 今天 计划 做 了 什么 以及 遇到 的 问题 ， 这些 问题 由 专人 记录 ， 但 不 在 站 会上 讨论 。 站 会 之后 找 相关 的 人 讨论 和 解决 。 敏捷 迭代 评审 会议 参与 人员 ： 产品 经理 、Product Owner、Scrum Master、 团队 所有 成员 会议 时 长 ：1-4 小时 ， 视 演示 内容 而 定 在 冲刺 结束 前 给 产品 负责人 演示 并 接受 反馈 和 建议 ， 提出 新 的 产品 Backlog， 主要 是 检验 成果 ， 看 是否 完成 本次 迭代 的 目标 ， 可以 邀请 用户 参与 测试 流程 ， 并 征询 客户 的 意见 和 想法 。 由 Scrum Master 来 推进 会议 进程 ，Product Owner 进行 会议记录 ， 这些 意见 和 反馈 维护 产品  backlog， 一般 在 迭代 结束 前 做 一次 。Sprint Retrospective 敏捷 迭代 回顾 会议 参与 人员 ：Scrum Master，Product Owner， 团队 成员 。 会议 时 长 ：1-2 小时 每个 迭代 结束 后 ， 关于 团队 自身 如何 做出 改进 如何 优化 产品 的 会议 ， 团队 成员 自由 讲述 关于 这次 冲刺 需要 保持 的 做法 ， 改进 的 点 以及 持续 跟踪 计划 。 找出 本次 冲刺 中 做 的 好 的 方面 继续 坚持 ， 对于 做 得 不好 或者 可以 更好 的 方面 持续 改进 。 并 选择 出 下 一个 迭代 我们 要 完成 的 sprint backlog。Scrum Master 或者 Product Owner， 对于 讨论 内容 整理 成 会议记录 ， 并 发送给 整个 团队 和 有关 同事 。 这 四个 会议 会 伴随 着 每 一次 冲刺 ， 每 一个 团队 在 每个 冲刺 的 执行 过程 当中 不断 学习 发现 和 总结经验 ， 找到 最 适合 自身 的 方法 ， 使 团队 真正 的 敏捷 起来 。","title":"Choerodon 的 敏捷 之 路 ","oriTitle":"Choerodon的敏捷之路"}]