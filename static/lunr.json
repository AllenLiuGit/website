{"/en/blog/agile-implementation-experience":{"url":"en/blog/agile-implementation-experience","title":"敏捷实施经验贴(英文)","date":"2018-04-08","author":"刘海螺","description":"敏捷转型并没有那么简单。敏捷是一个很强大的工具，运用得好确实可以收到很好的管理和交付效果，但是运用得不好，很可能就会事倍功半","img":"/img/blog/agile-implementation-experience/agile-1.jpg","tags":["敏捷"],"categories":["技术类"],"language":"en","body":""},"/zh/blog/agile-implementation-experience":{"url":"zh/blog/agile-implementation-experience","title":"敏捷实施经验贴","date":"2018-04-08","author":"刘海螺","description":"敏捷转型并没有那么简单。敏捷是一个很强大的工具，运用得好确实可以收到很好的管理和交付效果，但是运用得不好，很可能就会事倍功半","img":"/img/blog/agile-implementation-experience/agile-1.jpg","tags":["敏捷"],"categories":["技术类"],"language":"zh","body":"摘要：敏捷转型并没有那么简单，不是把那一套运作模式运作起来就可以，毕竟每个公司的情况都有所差异，仅仅把敏捷那一套运作模式照搬过来是远远不够的。对于管理者来说，希望通过敏捷提升软件交付的效率和质量，并且希望通过敏捷转型打造一个高效、学习型的团队。其实，敏捷是一个很强大的工具，运用的好确实可以收到很好的管理和交付效果；但是运用的不好，很可能就会事倍功半。本文将总结在过去的一段时间里，我们自身在敏捷转型过程中踩过的坑，希望对大家在做敏捷转型或者实施的有一定借鉴意义和帮助。 随着互联网、大数据的发展和成熟，包括新零售等概念的提出、探索和落地，越来越多的企业开始进行敏捷转型，在软件开发过程中采用敏捷的方式，期望可以提升开发效率，改善交付质量。敏捷也不再局限于互联网行业，很多传统行业——包括银行、保险、电信、零售等等也逐渐开始认同敏捷的开发方式和流程，在企业内部的系统开发过程中把敏捷与原有的流程相互融合，以更好地适应高速、快节奏所带来的不确定性，进一步提升IT部门和系统更好地服务企业战略目的和满足市场需求的能力。 对于管理者来说，希望通过敏捷提升软件交付的效率和质量，并且希望通过敏捷转型打造一个高效、学习型的团队。其实，敏捷是一个很强大的工具，运用的好确实可以收到很好的管理和交付效果；但是运用的不好，很可能就会事倍功半。 为什么敏捷很好，但是我们却很难落地？ 本文将总结在过去的一段时间里，我们在转型过程中踩过的坑，以作前车之鉴。也聊聊在转型过程中，哪些优秀的实践可以尝试，走上渐进变革的道路。 敏捷是不是可以缩短项目周期，或者说“敏捷就是快”? 在接触敏捷之前，大家对敏捷都是一知半解，更多的停留在字面意思的理解上：“敏捷就是快”。一旦有人觉得不快时，就会发出质疑：我们的敏捷做对了吗？ 其实，敏捷并不意味着“快”，“敏捷”在百度字典中的解释是“反应迅速快捷”。在软件开发中，敏捷是使用各种管理的手段（例如，3个角色，5个事件）来确保软件开发人员能够对于外部或者内部的需求或者变化能够迅速的做出反应，保证软件系统的功能或者其他特性能够满足市场或者用户的要求。 敏捷模型和瀑布式开发模型是对立的，瀑布式开发模型主要是“按部就班”的进行需求调研、系统设计、详细设计、功能开发、测试、上线，以及运维等，我相信大家对于瀑布式开发模型非常熟悉，现在大部分的甲方IT部门或者乙方公司都采用这样的交付管理手段。同样，大家和我也有相同的感触，系统的需求可能不断地在变化，或者是调研不清楚，亦或设计不能够满足用户需求，没有别的选择，只能硬着头皮加班加点修改，呵呵，这也是程序员经常吐槽的地方…本质上，瀑布式的开发模型是“非常害怕变化的”，一旦有“任何的风吹草动”整个项目组都紧绷神经，进而通宵达旦；而敏捷模型则是“拥抱变化的”，敏捷拒绝“一成不变”，崇尚软件系统功能“持续增强”，它是把整个软件交付周期“拆”成一个一个小的瀑布模型，每个瀑布模型持续一周或者两周，我们把它称作“冲刺”，在每一个冲刺中都要进行需求的讨论和确认，都要对交付的成果进行评审，并且项目组还要进行自身的反思和回顾，这样即使变化来了，我们通过敏捷模型能够“轻松的应对”。 有一个例子，共享单车刚刚起步的时候，市场上共享单车的公司不多，共享单车的创新是通过互联网和手机支付的手段，帮助和方便用户完成 “最后一公里”的交通出行。起初共享单车业务逻辑是一辆自行车的成本大约200元人民币，设计寿命是3年，用户骑行一次大约需要支付1块钱，一辆自行车一年差不多可以收回200元的成本，第二年和第三年就可以实现盈利。但是，没有想到不到半年时间，其他的共享单车如雨后春笋般的出现，而且价格更低，并且有各种优惠活动。第一个吃螃蟹的共享单车企业原来的商业模式已经失效，但是他们发现他们有一个很大押金池子，如何有效的利用这笔资金成了他们“最后的救命蒿草”，他们的软件系统功能如何支撑“有效的利用这笔资金”成为了他们迫在眉睫要解决的问题。如果采用瀑布式的开发模型，按部就班，“3个月或者半年之后交付”，可能市场又不知道发生了什么变化。而敏捷的模型则可以在一定程度上很好的应对这样的突发情况。 总之，敏捷的核心是快速地应对变化，本质上，它并不能缩短软件交付的周期。有时候我们感觉“敏捷快”是因为它能够快速的响应市场或者用户的需求变化，而不是以前瀑布模型中，用户和项目组都为“这个功能是这个样子的，而不是现在开发成的这个样子”而相互的扯皮，推诿… 当然，我们在瀑布模型中也会主动或者被动地使用到“敏捷”，用户提出需求变更，今天晚上或者明天就可以看到结果。 之前的项目管理一般先出文档，跟着文档来开发，现在实施敏捷之后，大家主要是以沟通为主，有些需求不是一定要有文档才能开发，可以说在开发过程中有些需求通过沟通取代了文档。是不是敏捷就不需要文档了？ 在敏捷宣言中四个核心价值观： 个体和互动 高于 流程和工具 工作的软件 高于 详尽的文档 客户合作 高于 合同谈判 响应变化 高于 遵循计划 其中，“工作的软件 高于 详尽的文档”，对于这句话的解读，以及根据实践获得的经验，并不是实施了敏捷之后，就不需要文档，俗话说“好记性不如烂笔头”，有很多的文档，还是必须要做的，例如功能设计文档，DDD设计文档，UI设计文档等。从敏捷的思路来说，只是认为相互沟通的效果会比文档去理解的效果要好，所以大部分的东西主张以沟通为主，文字为辅，如果沟通可以解决，那么文档如果没有什么附加价值就不写，但是如果它还是很有价值的，比方说功能设计，是以后需要看的，那就要写，所以做与不做看价值。 有价值的我们做，没价值的不做，举个例子，某银行去做敏捷转型之前，非常重视文档，每个文档都要思考很久才提交，他们一个项目的立项到结项要写55份文档，实施敏捷之后，从内部把文档裁剪到17个，从55到17个，而不是从55到0。那保留些什么，不保留什么，要看这些文档是怎么用的，有没有价值。 所以我们要自己判断一下要的是什么，不要的是什么。总的来说，你用了敏捷之后不是没有文档，而是把没有价值的文档删掉。 根据我们的经验，文档的更新也是一个敏捷和持续的过程，例如UI设计文档，我们会不断地与用户或者利益相关者沟通UI界面，每个冲刺都要沟通碰撞，直到某一个功能的设计满足美观、易用的要求。在这过程中，我们的UI设计师会根据反馈设计出不同的版本，甚至前端工程师要先实现这些UI设计，根据实践的效果不断地调整，直到项目组满意，再跟用户沟通，如果用户不满意，我们回来继续修改，就这样不断的“反反复复”，持续地更新。 敏捷倡导以沟通来代替文档，但是团队不是一成不变的，有成员走有成员进，这时候我们如何要做好经验的传递？ 新人来直接看文档就可以很快了解融入到团队里面是很难的，大部分的敏捷团队是通过沟通融入进去的。 比如：已经写好了一个文档，已经进行开发，突然间需求变更过来了，大部分的时候，需求突然变更，是不会先改文档再开发的，结果导致文档跟开发的情况不一致，新人看完文档后还是要再去理解代码，所以我们假设只要文档写好，后边的交接理解没有问题，新人都能理解文档里的内容，是不对的。 团队人员的流动不会全部流动，可能是十个里面两三个的概率，团队的其他人和新人沟通交流就好，如果有些比较重要的系统设计等，那就把系统设计重要的几页写下来，比方说接口，如何调度等很紧要的东西写下来，不需要面面俱到。开发结束写文档，也不需要担心新人无法融入。 如果真的觉得我们缺少了某些文档，应该在团队里说明，我们的开发过程应该做那份文档，比方说比较完整的测试用例，完整的需求场景描述等这些文档。 还有一个做法，这个我们在新老交替经常使用，就是结对编程。我们会安排“师傅”带着新人，一起做一段时间，在这段时间，“师傅”会将我们这边的基本情况，系统架构，功能，技术栈，规范等教给新人。并且会分配给他一些编程的工作，这样持续1-2周左右，新人基本上能够融入到现有的团队。 总之，通过纯文档的形式做新人的培训是很难的，应该采用沟通 + 文档的方式。 敏捷过程中还是存在传统项目中项目经理这个角色？ 如果用的是scrum模型，是没有定义项目经理这个角色，这个职责被PO和scrum master分摊掉，如果不是用scrum的模式，比如用看板模型，就没有说不要项目经理，而是继续引用现有角色。从广义的角度来说，敏捷中“没有项目经理”这句话不是完全正确的，但如果你用敏捷scrum模型，确实没有定义这个角色，但只是敏捷scrum模型而已，敏捷还有n多模型，项目经理的角色剔除或者不剔除要看我们使用的敏捷模型是什么。 根据我们的经验，Scrum模型中可以没有项目经理，这个职责被PO和scrum master分摊掉。PO主要对产品负责，他以产品为引导驱动整个开发Team，类似“连长”“排长”的角色；而Scrum Master则是对整个软件生产经营活动中的“规章制度”“流程”等负责，类似“政治委员”的角色。但是 ，我们在实际的操作过程中，还需要另外一个角色“技术负责人”，虽然说Scrum模型中定义的开发团队，应该是一个自组织、跨职能的团队，但是对于产品的架构、系统设计、开发规范等，都需要一个有经验的技术牵头完成，包括代码质量保证等，我们尝试过没有这样的一个人（说起来都是泪），最后前后端代码的质量非常差，而且后端出现了严重的性能问题，原因就是没有一个相对来说有一定技术权威的人，来配合项目组管理整个技术设计和规范。敏捷的转型本质上是要为每一个人赋能，但是实际情况是，项目组内部的人员能力、经验等会出现参差不齐的情况，如果是按照Scrum模型教科书式地推进，大家认为开发团队是一个“自组织、跨职能”的团队，让他们“完全自我管理”，那么就特别容易失败。所以，不管是使用哪一个模型都是需要根据实际的情况来操作，而不是完全教科书式的转型，但是刚开始的时候总是有一个摸索期。 多组之间依赖性强，敏捷小组之间的协调，有一些团队是依赖于某一个团队的，这个团队自己的任务和故事还没进行下去的时候，可能就要帮其他团队的任务，就阻塞自身的敏捷进行，团队之间的协作应该怎么更好去处理？ 对于跨组协调，有很多模型可以使用，比如scrum的标配scrum scrum模型，scrum scrum模型能在跨组上面进行定期的沟通，以便沟通之后能尽快解决团队之间存在的问题，如果没有这样的机制，进行定时的沟通；请人吃饭，搞好关系也是可以的，呵呵… 有跨组机制只是多一个方法和工具，无论你用新模型还是旧模型，跨组中肯定会存在协调问题。用了敏捷模型后，会给你一个沟通渠道，比如定时的会议，跟其他团队去协同沟通。在选择跨团队协作机制的时候，简单够好用就可以，不用太复杂。 与传统的项目管理方式对比，客户方习惯了将开发拆分到任务层面并指定deadline，而且传统的项目往往瀑布式比较多，会有大量的文档，当以用户故事的方式驱动开发，客户方业务只能看到用户故事，看不到具体内容，心中没底，总是存在质疑。这样的情况，我们应该如何和客户进行沟通交流？ 首先，我们要看当客户是不是很了解，敏捷方法的推行是客户方提出，还是我们推荐的。如果是客户提出的，必然会按照这个方法去做，如果是我们主张，我们团队有能力完成这样的交付，我们就要给客户解释，消除客户的质疑。 我们可以把以前的工作方法写一个flow给他，新的方法也写一个flow给他，进行一个简单演示，之前的flow，从需求到PRD，PRD到设计的一系列流程，以前的flow流程，和新的flow进行对比，敏捷化之后我们都会有与之对应或者替代的环节，比如计划会对应需求到PRD这一过程，可能以前的flow你会看到PRD，现在敏捷化之后被用户故事替代，其他也是一样，你虽然看不到之前的，但是依然可以从某个方面获取到进度以及其它方面需要的信息。 总体来说，遇到这种情况，我们自身先学一点这方面的能力，实施的技术人员和业务人员如果没有完成敏捷相关培训和教育，敏捷推行的时候，我们要帮助客户简单了解敏捷的意义，推行敏捷能够带来什么样的好处，但是归根到底我们是做交付的，未必能给出一个很好的解释。要让客户知道我们之间少了一方沟通交流的人来解释敏捷实施过程遇到的问题，关于敏捷的教育培训，客户方自身那边安排一下会更好。 总的来说，敏捷转型不是一蹴而就的，而是一个持续的过程，在这过程中会有各种各样的问题出现，而且不同的公司，不同的文化，遇到的问题也不尽相同。遇到问题很正常，我们只要“咬定青山不放松”，在问题当中不断的解决问题，就一定能够发挥敏捷真正的威力，不断提升软件交付的效率和质量。 "},"/blog/agile-way-to-choerodon":{"url":"blog/agile-way-to-choerodon","title":"Choerodon的敏捷之路","date":"2018-03-15","author":"choerodon","description":"Choerodon认为软件交付的过程本质是用户价值的实现，而用户价值的实现是通过用户价值的流动来体现的，Choerodon提供了一套工具来帮助用户通过敏捷的方式来管理用户价值的流动，管理和规范化整个软件开发流程","img":"/img/blog/agile-way-to-choerodon/agile.jpg","tags":["敏捷","看板","用户故事地图","迭代","Scrum"],"categories":["技术类"],"language":"zh","body":"Choerodon认为软件交付过程的本质是用户价值的实现，而用户价值的实现是通过用户价值流动来体现的，Choerodon提供了一套工具来帮助用户通过敏捷的方式来管理用户价值的流动，使整个软件开发流程管化规范化。 关于软件开发，我们可以找到很多前人的经验，包括已经存在的方法论和工具。这两者很难说哪个方法论正确，或是哪个工具是最好用。其实开发是“任性的”，它没有特定的规律，整个开发过程是否高效，除了【团队的实力】这个决定因素以外，还取决于整个开发的流程是否清晰，通常高效总是伴随着清晰而来。 敏捷管理是以用户需求演变为中心，通过迭代方式来进行的软件开发。Choerodon敏捷管理的核心是需求，计划和执行。即通过故事地图、用户故事来管理用户故事和发布计划，通过迭代来管理冲刺，最后通过看板来可视化冲刺的执行。 故事地图 故事地图已经成为敏捷管理在需求规划中的一个重要的方法。Choerodon的故事地图可以将你的用户故事（user stories）像地图一样展现出来，而不是传统的简单列表形式。故事地图之所以重要是因为： 让你更容易看清整个项目的规划，所有的product backlog 为新功能筛选（grooming）和划定优先级提供了更好的工具，帮助你做出决策 便于使用头脑风暴或其他协作方式来产生用户故事 帮助你更好的进行迭代开发，同时确保早期的发布可以验证整体架构和解决方案 对于传统的项目计划，如：传统产品需求文档（PRD）提供了一个更好的替代工具 有助于激发讨论和管理项目范围 允许你从多个维度进行项目规划，并确保不同的想法都可以得到采纳 创建故事地图的8个步骤： 在公司或部门内找到最熟悉我们要开发的产品领域3-5人。之所以将范围定在3-5之间。因为少于三人很大程度上你没法得到足够的建议，而多于五人则讨论和协调会浪费很多时间，降低会议效率。 使用头脑风暴模式，让每个人在便签纸上写下自己认为重要的“所要做的事情”也就是用户任务（user task）。每个人都用同样颜色的便签来书写自己的用户任务描述，这个阶段不要互相讨论。一旦大家都基本完成了准备，让每个人轮流大声读出自己的内容，并把便签纸全部放置在桌面上，这时如果出现重复的内容就可以省略掉： 根据你的产品规模不同，这个过程可能需要3-10分钟的时间，通过观察实际状况而定 这些便签组成了一级用户故事，Jeff Patton称为用户任务（user tasks） 我们可以提示参与者：我们只用了很少的时间就完成了需求的收集过程，而且有些你可能没有想到内容，其他人帮你想到了 将桌面上所有的便签进行分组，将类似的任务分为一组： 分组过程最好不要以讨论的模式进行，速度会更快。如果发现重复的内容，就略过 这时同样观察每个人的行为，判断大家是否已经做完，基本上这个过程需要2-5分钟 选择另外一个颜色的便签，对分好每个组进行命名，贴在每组便签的上部。 对这些分好组的便签进行排序，一般按照用户完成操作的顺序，或者是其他的方式等，从左到右摆放： 如果大家无法决定顺序，那么顺序可能没有那么重要（明显） 这一组便签，Jeff Patton称为 用户活动 （User Activities） 这时你的地图应该类似于 现在，从粉色便签这行开始讲述用户故事，确保你没有遗漏任何用户活动和用户任务。这时一般由组织者来进行讲述，其他人提出意见，甚至可以让最终用户来参与讨论。 以上我们已经完成了用户故事地图的基本框架；可以在每个用户任务下面添加更加细节的用户故事（User Stories）了。我们仍然建议使用头脑风暴的模式来进行第一轮用户故事的产生，同时可以借助如Persona和Scenario等方式协助完成这个过程。当我们完成了用户故事的创建，就可以开始划定发布计划（Releases)： 在第一个发布计划中只选择每个用户任务的2-3个用户故事。这对于帮助大家排定优先级和范围将很有帮助 通常情况我们不必使用用户故事的标准句法来书写这些故事，因为每张便签都处于我们的地图的特定位置，很容易识别其所处的场景和角色 最后，针对第一个发布的所有用户故事进行分解，确保我们的第一个发布越小越好，基本上你需要保证在1-2个迭代后就可以发布你产品的第一个版本。 Choerodon故事地图样例 第二行所包含的内容就是“相应的角色对应的活动”，包括类似：用户角色管理，服务管理等等。 第一行说明有哪几类不同角色。 橙色和蓝色标签包含了目前整个项目整体规划的所有用户故事，但会随着项目进行进行适当调整和完善。 现在如果我们专注于完成导入冲刺的橙色便签，我们就可以确保很快发布一款具有用户价值小功能的产品。这样我们就可以验证我们正在开发或修改的小功能点（如：去掉发布管理员，将服务发布权限更改等）可行。同时也可以帮助我们对系统的功能进行端到端的测试，确保我们可以从用户处获取到反馈，知道我们是否解决了它们的问题（提供了商业价值）。 Choerodon用户故事样例 点击“+”，查看每个用户故事（user stories）的相关用户任务（user tasks）有哪些 直接清晰看到用户故事相应负责人 用户故事（user stories）可以根据优先级自上而下排列，大家可以根据优先级和状态进行评估，对开发进程进行适当的调整 迭代 用迭代来管理冲刺，每一个迭代对应一次冲刺，也可以简单理解为每一次冲刺就是一个迭代周期。在固定的时间内，要完成需求分析、设计、实现、测试等一系列活动，在迭代周期完成的时候提供一个可工作的产品(Release/Report)。每一次迭代完成的可能是一个或几个完整的用户故事，也可能是一个用户故事（user story）中的若干用户任务（user tasks） 敏捷方法很重视稳定的迭代节奏，Simon Baker描述说：\"就像心脏有规律地跳动来保持身体运行，固定的迭代长度提供了一个恒量，有助于建立开发和交付的节奏。根据我的经验，节奏是帮助取得不变的步幅的重要因素\"（2004）。对于敏捷开发的团队而言，稳定的迭代节奏可以让产品保持更稳定的交付。找到适合自身的迭代后期，我们可以从以下6各方面考虑： 整个项目周期长度（完成计划的商业需求所需时间），较短的迭代周期将会有以下一些优点和缺点: 更频繁的向客户展示/交付可用的软件，更频繁的取得反馈并改进，一般大的项目最好有3次或以上获取反馈、修正的机会，错误能被尽快发现从而不会酿成大错 迭代周期缩短，团队没有能力保证作出的每一个决定都正确，很多开销都必须花在试错上；Scrum 团队的抗风险能力弱于瀑布模型团队，因为一个人的离职或病假都可能对单一功能的进度造成影响 不确定性，客户需求的不确定，团队的工作效率，或者技术难度存在不确定性，总而言之，不确定性越多，迭代周期越短 获得反馈的难易程度 迭代周期内优先级是否被改变，也是选择迭代长度时需要考虑的因素 迭代的系统开销，每次迭代的成本（时间），在测试过程中我们要花费的时间 团队成员的压力，选择一个合适的迭代周期长度，让团队成员在整个迭代过程中感受到的压力尽可能平均 根据每个团队的实际情况，一般建议2~4周。在我们的实践中，通常以1-2周一次迭代的频率，保持相对稳定的开发和交付的节奏。 Choerodon冲刺样例 清晰展现当前迭代的完成度，以及总工作量 可以根据优先级和状态进行评估，对当前迭代进程进程进行整体把控 看板 看板方法是用于高效管理软件开发流程的新技术。看板方法源自丰田的“及时生产”（JIT=just-in-time）系统。尽管生产软件是一项创造性活动，与批量生产汽车有所不同，但是生产线管理背后所蕴含的原理仍然适用。 一个软件开发的流程可以看作是一段自来水管道，特性需求从一端进入，经过改进的软件从另一端涌现出来。 在管道内部，存在着各种各样的工序，有的是非正式的临时工序，有的是非常正式的阶段性流程。在本文中，我们假设一个简单的阶段性流程：(1)分析需求，(2)开发代码，(3)测试软件运行正常。 Choerodon的看板是Choerodon敏捷管理中执行部分，它的核心作用是可视化整个迭代的计划执行，并且暴露开发执行过程中的短板或者瓶颈。我们都知道在软件开发过程中，短板或者瓶颈会直接的影响整个开发进程。 例如，如果测试人员每周只能测试5个特性，而开发人员和分析人员每周能够生产10个特性，整个管道的吞吐量就只有每周5个特性 ，因为测试人员扮演了瓶颈角色。如果分析人员和开发人员不知道测试人员是瓶颈，那么测试人员的待办工作就会越堆积越多。 影响就是前置时间增加。并且，就如同库存一样，位于管道中的工作会套牢投入的资金、产生与市场的距离、以及随着时间逐渐失去价值。 最终，影响到质量。为了能够跟上进度，测试人员开始抄近路。最终bug被发布到产品中，导致给用户带来问题，从而影响未来的管道产能。 另一方面，如果我们知道哪里有瓶颈，我们就能够重新部署资源来解除它。例如，分析人员可以帮忙测试，开发人员开始进行自动化测试。但是，我们怎样才能知道在已知流程中哪里是瓶颈呢？而当瓶颈移动后会发生什么呢？ 看板方法可以动态显示瓶颈 看板方法难以想象的简单，但却难以想象的强大。最简单的形式的看板系统包括了一个挂在墙上的大白板，上面有许多卡片或即时贴，这些即时贴按列来放置，每列上方有一个数字。 你之所以能找到这些瓶颈，是因为限制了在制品（work-in-progress WIP）的数量会显示出瓶颈。 卡片代表了工作项，列代表了开发工序，卡片会从第一步工序流动到最后一步。每一列顶部的数字用来限制每一列最多允许放置卡片的数量。 看板白板的限制大相径庭于其他任何可视化故事板。在流程中的每一步限制在制品（WIP）数量，可以预防生产过剩并动态显现出瓶颈，以便于你可以在达到不可收拾的程度之前找到它们。 Choerodon的看板 注意，我们已经将一些列分割成了两列，这是为了用来说明正在进行中的项与哪些已经完成并准备好被下游工序拉走的项。你也可以用一些不同的方式来布局白板。这里用的是比较简单的方式。列顶部的限制包含了“doing”（进行中）和“done”（完成）两列。 一旦测试人员完成了一个特性的测试，就会将卡片移走，并且在“测试”列空闲出一个卡片位置。 现在，“测试”列中空出来的位置可以用开发“Done”列中的一个卡片补充进来。这时，“开发”列就会空闲出一个卡片位置，下一张卡片就可以从“分析”列中拉进来，其他列也是这样。 敏捷会议 敏捷管理过程中，看板的使用和敏捷会议流程往往是相辅相成的，常见的主要有以下四种会议 计划会（一） 参与人员：Product Owner、Scrum Master、团队成员，也可以邀请业务人员一起参加 会议时长：1-4小时 根据确定好的故事地图和用户故事，我们通过计划会议，确定迭代的目标、团队成员、形成本次迭代的Sprint Backlog，同时明确评审会、回顾会时间。 确定Sprint Backlog确定工作量（工作时间）。 计划会（二） 参与人员：Product Owner、Scrum Master、团队成员，其他人员选择性参加 会议时长：1-4小时 团队成员共同拆解细化sprint backlog，拆解为若干tasks 共同进行工作量评估，可以按照天或小时来评估 团队成员自主选择任务，共同确定DoD完成标准，团队内部达成一致 如果单个迭代内安排的Product Backlog安排的比较多的话，一般迭代计划会议需要开一个整天，虽然时间有点长，但这个会议会确认整个迭代的详细计划和安排，使开发流程变清晰。 每日站会 团队每天进行沟通的内部短会，一般只有10-15分钟，团队成员通常会在会议上讲述昨天的工作，今天计划做了什么以及遇到的问题，这些问题由专人记录，但不在站会上讨论。站会之后找相关的人讨论和解决。 敏捷迭代评审会议 参与人员：产品经理、Product Owner、Scrum Master、团队所有成员 会议时长：1-4小时，视演示内容而定 在冲刺结束前给产品负责人演示并接受反馈和建议，提出新的产品Backlog，主要是检验成果，看是否完成本次迭代的目标，可以邀请用户参与测试流程，并征询客户的意见和想法。 由Scrum Master来推进会议进程，Product Owner进行会议记录，这些意见和反馈维护产品 backlog，一般在迭代结束前做一次。 敏捷迭代回顾会议 参与人员：Scrum Master，Product Owner，团队成员 会议时长：1-2小时 每个迭代结束后，关于团队自身如何做出改进如何优化产品的会议，团队成员自由讲述关于这次冲刺需要保持的做法，改进的点以及持续跟踪计划。找出本次冲刺中做的好的方面继续坚持，对于做得不好或者可以更好的方面持续改进。并选择出下一个迭代我们要完成的sprint backlog。 Scrum Master或者Product Owner，对于讨论内容整理成会议记录，并发送给整个团队和有关同事。 这四个会议会伴随着每一次冲刺，每一个团队在每个冲刺的执行过程当中不断学习发现和总结经验，找到最适合自身的方法，使团队真正的敏捷起来。 "}}